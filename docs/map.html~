<div id="map"></div>
<a class="btn-floating btn-large waves-effect waves-light red map-button"><i class="material-icons">add</i></a>
<script>
var circleRadius = 2

var local_airports = []
var this_datamap
var arcs = []
var bubbles = []

function getUrl(airport, year){
    return 'data/'+ year +'_pax_'+ airport +'.csv'
}

function parseCSV(input) {
    var rows = input.split(/\r?\n/);
    var keys = rows.shift().split(",");
    return rows.map(function(row) {
        return row.split(",").reduce(function(map, val, i) {
            map[keys[i]] = val;
            return map;
        }, {});
    })
}

function toArcs(input, from_airport) {
    var arcs = []
    input.map(function(row) {
        if(Object.entries(row).length > 1){
            if(row["value"] > 0){
                var from = {"latitude":from_airport.lat, "longitude":from_airport.lon};
                var to = {"latitude":row.airpt_lat, "longitude":row.airpt_lon};
                pax_factor = 1.5 + Math.pow(row.value, 5/6)/25000;
                //var options = {}
                //var data = {"origin": from, "destination": to, "options": options, "name": row.airpt}
                var data = {"origin": from,
                            "destination": to,
                            "iataFrom": from_airport.iata,
                            "icaoTo": row.airpt,
                            "iataTo": row.airpt_iata,
                            "nameTo": row.airpt_name,
                            "value": row.value,
                            "strokeColor": 'rgba(250,100,50, '+Math.min(0.15+pax_factor/16, 1)+')',
                            "strokeWidth": pax_factor};
                arcs.push(data);
            }
        }
    });
    return arcs;
}

function toBubbles(input, from_airport) {
    var bubbles = []
    input.map(function(row) {
        if(Object.entries(row).length > 1){
            if(row.value > 0){
                //pax_factor = Math.sqrt(row["pax2018"])/500
                pax_factor = 1 + Math.pow(row.value,3/4)/15000;
                data = {"radius": circleRadius*pax_factor/prev_scale,
                        "iataFrom": from_airport.iata,
                        "icaoTo": row.airpt,
                        "iataTo": row.airpt_iata,
                        "nameTo": row.airpt_name,
                        "value": row.value,
                        "latitude":row.airpt_lat,
                        "longitude":row.airpt_lon,
                        "borderWidth": 1,
                        "borderOpacity": 0.5,
                        "fillColor": '#ff7043', 
                        "fillOpacity": 1,
                        "highlightFillColor": 'rgba(255, 255, 255, 0.8'};
                bubbles.push(data)
            }
        }
    })
    return bubbles
}
    //basic map config with custom fills, mercator projection
    function Zoom(args) {
    $.extend(this, {
      $buttons:   $(".zoom-button"),
      $info:      $("#zoom-info"),
      scale:      { max: 50, currentShift: 0 },
      $container: args.$container,
      datamap:    args.datamap
    });

    this.init();
  }

  Zoom.prototype.init = function() {
    var paths = this.datamap.svg.selectAll("path"),
        subunits = this.datamap.svg.selectAll(".datamaps-subunit");

    // preserve stroke thickness
     // paths.style("vector-effect", "non-scaling-stroke");

    // disable click on drag end
    subunits.call(
      d3v3.behavior.drag().on("dragend", function() {
        d3v3.event.sourceEvent.stopPropagation();
      })
    );

    this.scale.set = this._getScalesArray();
    this.d3Zoom = d3v3.behavior.zoom().scaleExtent([ 1, this.scale.max ]);

    this._displayPercentage(1);
    this.listen();
  };

  Zoom.prototype.listen = function() {
    this.$buttons.off("click").on("click", this._handleClick.bind(this));

    this.datamap.svg
      .call(this.d3Zoom.on("zoom", this._handleScroll.bind(this)))
      .on("dblclick.zoom", null); // disable zoom on double-click
  };

  Zoom.prototype.reset = function() {
    this._shift("reset");
  };

  Zoom.prototype._handleScroll = function() {
    var translate = d3v3.event.translate,
        scale = d3v3.event.scale,
        limited = this._bound(translate, scale);

    this.scrolled = true;

    this._update(limited.translate, limited.scale);
  };

  Zoom.prototype._handleClick = function(event) {
    var direction = $(event.target).data("zoom");

    this._shift(direction);
  };

  Zoom.prototype._shift = function(direction) {
    var center = [ this.$container.width() / 2, this.$container.height() / 2 ],
        translate = this.d3Zoom.translate(), translate0 = [], l = [],
        view = {
          x: translate[0],
          y: translate[1],
          k: this.d3Zoom.scale()
        }, bounded;

    translate0 = [
      (center[0] - view.x) / view.k,
      (center[1] - view.y) / view.k
    ];

  	if (direction == "reset") {
    	view.k = 1;
      this.scrolled = true;
    } else {
    	view.k = this._getNextScale(direction);
    }

  l = [ translate0[0] * view.k + view.x, translate0[1] * view.k + view.y ];

    view.x += center[0] - l[0];
    view.y += center[1] - l[1];

    bounded = this._bound([ view.x, view.y ], view.k);

    this._animate(bounded.translate, bounded.scale);
  };
  
  Zoom.prototype._bound = function(translate, scale) {
    var width = this.$container.width(),
        height = this.$container.height();

    translate[0] = Math.min(
      (width / height)  * (scale - 1),
      Math.max( width * (1 - scale), translate[0] )
    );

    translate[1] = Math.min(0, Math.max(height * (1 - scale), translate[1]));

    return { translate: translate, scale: scale };
  };

  var prev_scale = 1
  Zoom.prototype._update = function(translate, scale) {
    this.d3Zoom
      .translate(translate)
      .scale(scale);
    //console.log(this.d3Zoom.scale())
    this.datamap.zoom(scale)
    this.datamap.svg.selectAll("g")
      .attr("transform", "translate(" + translate + ")scale(" + scale + ")");
    //<!--this.datamap.svg.selectAll("circle").attr("r", circleRadius/scale);-->
    this.datamap.svg.selectAll("circle")
      .attr("r", function(d) { return d3v3.select(this).attr("r")*(prev_scale/scale);})
    prev_scale = scale
    this._displayPercentage(scale);
  };

  Zoom.prototype._animate = function(translate, scale) {
    var _this = this,
        d3Zoom = this.d3Zoom;

    d3v3.transition().duration(350).tween("zoom", function() {
      var iTranslate = d3v3.interpolate(d3Zoom.translate(), translate),
          iScale = d3v3.interpolate(d3Zoom.scale(), scale);

  		return function(t) {
        _this._update(iTranslate(t), iScale(t));
      };
    });
  };

  Zoom.prototype._displayPercentage = function(scale) {
    var value;

    value = Math.round(Math.log(scale) / Math.log(this.scale.max) * 100);
    this.$info.text(value + "%");
  };

  Zoom.prototype._getScalesArray = function() {
    var array = [],
        scaleMaxLog = Math.log(this.scale.max);

    for (var i = 0; i <= 10; i++) {
      array.push(Math.pow(Math.E, 0.1 * i * scaleMaxLog));
    }

    return array;
  };

  Zoom.prototype._getNextScale = function(direction) {
    var scaleSet = this.scale.set,
        currentScale = this.d3Zoom.scale(),
        lastShift = scaleSet.length - 1,
        shift, temp = [];

    if (this.scrolled) {

      for (shift = 0; shift <= lastShift; shift++) {
        temp.push(Math.abs(scaleSet[shift] - currentScale));
      }

      shift = temp.indexOf(Math.min.apply(null, temp));

      if (currentScale >= scaleSet[shift] && shift < lastShift) {
        shift++;
      }

      if (direction == "out" && shift > 0) {
        shift--;
      }

      this.scrolled = false;

    } else {

      shift = this.scale.currentShift;

      if (direction == "out") {
        shift > 0 && shift--;
      } else {
        shift < lastShift && shift++;
      }
    }

    this.scale.currentShift = shift;

    return scaleSet[shift];
  };

  function Datamap() {
    this.$container = $("#map");
  	this.instance = new Datamaps({
        scope: 'world',
        element: this.$container.get(0),
        projection: 'mercator',
        done: this._handleMapReady.bind(this),
        geographyConfig: {
            popupOnHover: false,
            highlightOnHover: false,
            borderColor: '#444',
            borderWidth: 0.5,
        },
        fills: {
            defaultFill: '#131522'
        },
    });
  }

  function updateMapInfo(datamap, animate, airport, year){
    fetch(getUrl(airport, year))
        .then(response => response.text())
        .then(text => {
            from_airport = defiant.search(local_airports, '//*[airpt="'+airport+'"]')[0]
            jsonArray = parseCSV(text)
            arcs = toArcs(jsonArray, from_airport);
            datamap.arc(arcs, {greatArc: true, animationSpeed: 600*animate});
            bubbles = toBubbles(jsonArray, from_airport)
            origin = {radius: 5/prev_scale, "icaoTo": "", "latitude":from_airport.lat, "longitude":from_airport.lon, borderWidth: 1, borderOpacity: 0.5, fillColor: 'rgba(255, 255, 255, 0.5', fillOpacity: 1}
            bubbles.push(origin)
            datamap.bubbles(bubbles)
    });
  }

  Datamap.prototype._handleMapReady = function(datamap) {
  	this.zoom = new Zoom({
    	$container: this.$container,
    	datamap: datamap
    });
    this_datamap = datamap;
    d3v3.json("data/local_airports.json", function(error, dataLocal) {
      local_airports = dataLocal;
      updateMapInfo(datamap, true, current_airport, current_year);
      d3v3.select("#change-aip").on("click", function(){
          //current_airport = (++current_airport)%airports.length;
          //current_year = (++current_year)%years.length;
          //updateMapInfo(datamap, true, current_airport, current_year);
      });
    });
  }

  new Datamap();
</script>
</body>
